---
- name: Users config
  tags: users
  block:

  - name: Users | Validate users input
    ansible.builtin.assert:
      that: not (users_users and users_git_users.git_url is defined)
      msg: users_users and users_git_users are mutually exclusive.

  - name: Users | Add pubkey to authorized_keys for {{ users_default_user }}
    ansible.posix.authorized_key:
      user: "{{ users_default_user }}"
      key: "{{ users_default_user_pubkeys }}"
      exclusive: true
    when: users_default_user_pubkeys

  - name: Users | Create groups
    ansible.builtin.group:
      name: "{{ item.name }}"
      state: "{{ item.state | default('present') }}"
      system: "{{ item.system | default(false) }}"
    loop: "{{ users_groups }}"

  - name: Users | Get users from git
    when: users_git_users.git_url is defined
    block:

    - name: Users | Store private key temporarily
      ansible.builtin.copy:
        content: "{{ users_git_users.key_file }}"
        dest: "{{ _users_git_keyfile_path }}"
        owner: root
        group: root
        mode: "0600"
      when: users_git_users.key_file is defined

    - name: Users | Create a temporary directory
      ansible.builtin.file:
        path: "{{ _users_git_path }}"
        state: directory
        owner: root
        group: root
        mode: "0700"

    - name: Users | Clone git repository
      ansible.builtin.git:
        key_file: "{{ _users_git_keyfile_path if users_git_users.key_file is defined else omit }}"
        repo: "{{ users_git_users.git_url }}"
        dest: "{{ _users_git_path }}"
        version: "{{ users_git_users.git_version | default('HEAD') }}"
        single_branch: true
        force: true

    - name: List directory contents
      ansible.builtin.find:
        paths: "{{ _users_git_path }}"
        file_type: any
      register: dir_contents

    - name: Display directory contents
      debug:
        var: dir_contents.files

    - name: Users | Load user data from cloned repository
      ansible.builtin.include_vars:
        file: "{{ _users_git_path }}/users.yml"
        name: _loaded_users

    - name: Users | Remove temporary paths
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ _users_git_path }}"
        - "{{ _users_git_keyfile_path }}"


  - name: Users | Set user data
    ansible.builtin.set_fact:
      _users_data: "{{ (users_git_users.git_url is defined) | ternary(_loaded_users.users_users, users_users) }}"

  - name: Users | Create the users
    ansible.builtin.user:
      name: "{{ item.username }}"
      comment: "{{ item.full_name }}"
      password: "{{ item.password | default('*') }}"
      shell: "{{ item.shell | default(users_default_shell) }}"
      groups: "{{ item.groups | default([]) }}"
      append: false
      state: "{{ item.state | default('present') }}"
      system: "{{ item.system | default(false) }}"
      remove: "{{ item.remove | default(true) }}"
    loop: "{{ _users_data }}"

  - name: Users | Add pubkey to authorized_keys
    ansible.posix.authorized_key:
      user: "{{ item.username }}"
      key: "{{ item.ssh_keys }}"
      exclusive: true
    loop: "{{ _users_data }}"
    ignore_errors: "{{ ansible_check_mode }}"
    when: not (item.system | default(false))

  # Lingering is a systemd feature that keeps a user's session running even after they log out
  # This is useful for services that need to run as a user, like a container run with podman
  - name: Users | Enable linger for user {{ item.username }}
    ansible.builtin.file:
      dest: /var/lib/systemd/linger/{{ item.username }}
      mode: "0644"
      state: touch
      modification_time: preserve
      access_time: preserve
    loop: "{{ _users_data }}"
    when: item.get('options', {}).linger | default(false)

  - name: Users | Allow nopasswd sudo
    community.general.sudoers:
      name: custom_sudo
      group: "{{ _users_sudo_group_name }}"
      commands: ALL
      validation: required
    when: users_nopasswd_sudo
