---

# Default root user: mostly it's root, sometimes it's ec2-user, ubuntu, etc.
# If left empty, the role will try to detect the default user
users_default_user: root

# Set the default public key for the default user. Define multiple ones with | multi-string
# Only these keys will be in the authorized_keys file
users_default_user_pubkeys: ""

# Create additional users. To remove them, don't just remove them from this list because Ansible will become
# unaware of them. Instead, set their state to "absent" and run the playbook again. After applying, they can be removed
# from this list. Mutually exclusive with `users_git_users`. Will be ignore if the latter is set.
#
# Note: append is set to false, so the groups for the user will be overwritten
users_users: []
  # - username:
  #   full_name:
  #   ssh_keys:      Required, define multiple with | multi-string, unlisted keys will be removed. Optional when system is true
  #   password:      Optional, default "*". Enter the hashed password as the value. Use `mkpasswd --method=SHA-512` to generate one
  #   shell:         Optional, default {{ users_default_shell }}
  #   groups: []     Optional, recommended "ssh" for ssh access
  #   state:         Optional, default "present". Set to "absent" to remove the user
  #   system:        Optional, default false
  #   remove:        Optional, default true, to remove the folders associated with the user
  #   options: {}    Optional, e.g. linger: true

# Create additional users from a git repository containing a users.yml file.
# users.yml must define a `users_users` list (same format as `users_users` var).
# To remove users, set their state to "absent" and run the playbook again.
users_git_users: {}
  # git_url:         Required, the URL of the git repository
  # key_file:        Optional, the private key for authentication (vault encrypted)
  # git_version:     Optional, default "HEAD"

# Create additional groups. To remove them, don't just remove them from this list because Ansible will become
# unaware of them. Instead, set their state to "absent" or remove them from the list and run the playbook again.
# You can also specify if the group is a system group by setting the 'system' attribute to true.
users_groups: []
  # - name:           Required, the name of the group
  #   state:          Optional, default "present"
  #   system:         Optional, default false

users_default_shell: /bin/bash

# Allow NOPASSWD sudo for sudo group
users_nopasswd_sudo: false
